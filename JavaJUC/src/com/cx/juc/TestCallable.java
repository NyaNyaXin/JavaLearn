package com.cx.juc;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.FutureTask;

/*
 * 创建执行线程的方式三：实现Callable接口.相较于实现Runnable接口的实现方式：方法可以有返回值，并可以抛出异常
 * 
 * 执行Callable的方式，需要FutureTask实现类的支持，用于接收运算结果。FutureTask是Future接口的实现类
 * **/
public class TestCallable {
	public static void main(String[] args) {
		ThreadDemo td = new ThreadDemo();
		// 1.执行Callable的方式，需要FutureTask实现类的支持，用于接收运算结果
		FutureTask<Integer> result = new FutureTask<>(td);
		new Thread(result).start();

		// 2.接收线程运算后的结果
		try {
			System.out.println(result.get());//FutureTask也可用于闭锁的操作
			System.out.println("――――――――――――――――――――――――――――――――――――――");
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ExecutionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}

class ThreadDemo implements  Callable<Integer>{

	
	@Override
	public Integer call() throws Exception {
		int sum = 0;
		for(int i=0;i<=100;i++) {
			sum += i;
		}
		return sum;
	}


}
